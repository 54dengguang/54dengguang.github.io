<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DG&#39;WiKi</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-01T16:24:51.254Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dengguang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>信号处理参数浅谈</title>
    <link href="http://example.com/DSP/2023/03/01/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E6%B5%85%E8%B0%88/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E6%B5%85%E8%B0%88/"/>
    <id>http://example.com/DSP/2023/03/01/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E6%B5%85%E8%B0%88/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%8F%82%E6%95%B0%E6%B5%85%E8%B0%88/</id>
    <published>2023-02-28T18:31:37.000Z</published>
    <updated>2023-03-01T16:24:51.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>一直想对自己基础的信号处理知识做一个整理，因为所涉及的东西太多，笔者能力还没办法现在就系统化的理清整个知识结构，就从随笔开始，后续知识全部记录后再做总体串联，笔者所经历的高频信号处理项目，都没办法绕开一个指标有效位（ENOB）。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;一直想对自己基础的信号处理知识做一个整理，因为所涉及的东西太多，笔者能力还没办法现在就系统化的理清整个知识结构，就从随笔开始，后续知识全部记</summary>
      
    
    
    
    <category term="DSP" scheme="http://example.com/categories/DSP/"/>
    
    <category term="1.信号处理随笔" scheme="http://example.com/categories/DSP/1-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>阻抗浅谈</title>
    <link href="http://example.com/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/"/>
    <id>http://example.com/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/</id>
    <published>2023-02-26T04:54:43.000Z</published>
    <updated>2023-03-01T16:00:08.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电阻，阻抗和阻抗匹配"><a href="#电阻，阻抗和阻抗匹配" class="headerlink" title="电阻，阻抗和阻抗匹配"></a>电阻，阻抗和阻抗匹配</h2><p>曾经一段时间，受到电阻，阻抗和阻抗匹配的困扰。刚接触射频的时候，经常会有人跟我说，阻抗匹配为50欧姆，75欧姆或者100欧姆。但是PCB板回来后，你用万用表去测量试试会发现那段传输线可能连1欧姆都没有，笔者因此懵逼了好长一段时间。最近由于涉及到射频功率问题突然联想到阻抗匹配的问题，虽然也知道我们常说的阻抗匹配是是针对射频传输线问题来的，常说的50欧姆，100欧姆也是特性阻抗，而非万用表直流档位测试的电阻阻值。但是，如果不去详细记录下，总感觉不自在，因此有了以下资料总结。</p><h2 id="电阻"><a href="#电阻" class="headerlink" title="电阻"></a>电阻</h2><p>电阻（Resistance）在<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%AD%A6/313183?fromModule=lemma_inlink">物理学</a>中表示<a href="https://baike.baidu.com/item/%E5%AF%BC%E4%BD%93/1017277?fromModule=lemma_inlink">导体</a>对<a href="https://baike.baidu.com/item/%E7%94%B5%E6%B5%81/268192?fromModule=lemma_inlink">电流</a>阻碍作用的大小，导体的电阻越大。导体对流经的电流都会有或多或少的阻碍，其本质是<strong>不可逆的</strong>将电能转换为其它形式的能量。比如电路中的电阻，电热毯的发热丝，都是将电能转为热能耗散出去。白炽灯将热能转换为热与光。这个过程的本质是在电压下运动的电子与材料原子碰撞并将能量传给原子，原子再以辐射或传导方式将能量耗散掉。能量的转换也不只是“电子撞原子”这一种方式，比如电容的ESR（Equivalent Series Resistance，等效电阻）中就有一部分叫介质损耗，可以是电介质粒子在交变电场作用下不断翻转引起的电能到热能的转换。</p><h2 id="阻抗"><a href="#阻抗" class="headerlink" title="阻抗"></a>阻抗</h2><p>阻抗（impedance），在具有电阻、电感和<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AE%B9/146658?fromModule=lemma_inlink">电容</a>的电路里，对电路中的电流所起的阻碍作用叫做阻抗。阻抗常用Z表示，是一个复数，实部称为<a href="https://baike.baidu.com/item/%E7%94%B5%E9%98%BB/3315365?fromModule=lemma_inlink">电阻</a>，虚部称为电抗，电抗由容抗和感抗组成，其中<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AE%B9/146658?fromModule=lemma_inlink">电容</a>在<a href="https://baike.baidu.com/item/%E7%94%B5%E8%B7%AF?fromModule=lemma_inlink">电路</a>中对交流电所起的阻碍作用称为<a href="https://baike.baidu.com/item/%E5%AE%B9%E6%8A%97?fromModule=lemma_inlink">容抗</a>， 其本质是电路中容性负载以空间或电介质内的电场形式储存电能,<a href="https://baike.baidu.com/item/%E7%94%B5%E6%84%9F?fromModule=lemma_inlink">电感</a>在电路中对交流电所起的阻碍作用称为感抗，本质就是以空间或磁介质内的磁场储存电能。因此电抗和感抗主要作用为对电路中信号相位的改变。一般工程中，阻抗又会被简化为电阻，又或者引申为阻抗匹配，所以工程师需要注意具体的应用场景所代表的意思。</p><p><img src="/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/%E9%98%BB%E6%8A%97%E5%85%AC%E5%BC%8F%E5%9B%BE.png"></p><p>阻抗是负载的电阻，感抗和容抗的统称，其中R代表电阻，jwL代表感抗，1&#x2F;wC代表容抗，j为虚数，当jwL-1&#x2F;wC&gt;0时，电路负载为感性负载，当jwL-1&#x2F;wC&lt;0时，电路负载为容性负载。</p><h2 id="阻抗匹配"><a href="#阻抗匹配" class="headerlink" title="阻抗匹配"></a>阻抗匹配</h2><p>特性阻抗是相对于传输线的概念而言的。在高速应用场景，信号传输线已经不能看作理想导线，不能忽略传输线上的一些寄生参数，如寄生电阻、寄生电容、寄生电感。特性阻抗就是一个综合传输线场景下这些参数的合成参数。</p><p>单位长度的传输线可以等效为以下模型：</p><p><img src="/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/%E5%8D%95%E4%BD%8D%E4%BC%A0%E8%BE%93%E7%BA%BF%E9%98%BB%E6%8A%97%E6%A8%A1%E5%9E%8B.png"></p><p>其阻抗表达式如下：</p><p><img src="/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/%E9%98%BB%E6%8A%97%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%80%83%E8%99%91%E9%A2%91%E7%8E%87.png"></p><p>理论上精确的特性阻抗是一个与频率相关的量。而在实际应用中，传输线的电阻部分，即耗散能量的部分往往可以忽略不计，即上式中的R和G为0。近似为无损传输线。对于无损传输线，阻抗表达式可以表示为：</p><p><img src="/DSP/2023/02/26/1.%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/%E9%98%BB%E6%8A%97%E6%B5%85%E8%B0%88/%E7%B2%BE%E7%AE%80%E5%90%8E%E7%9A%84%E9%98%BB%E6%8A%97%E8%A1%A8%E8%BE%BE%E5%BC%8F.png"></p><p>阻抗是基础概念，描述的是一个电路或器件，加上特定的电压，电流会是什么样子。阻抗包含阻性、容性与感性。阻性描述耗散电能，容性与感性描述储存电能。阻抗与频率相关。电阻是阻抗在电抗部分为0时的特例。电阻与频率无关。特性阻抗是描述传输线的单位长度阻抗的参数，对于无损传输线，阻抗与频率无关。</p><p>针对特性阻抗，实时上通过计算或者仿真很难得到传输线的阻抗，工程上简单的办法是利用施密特圆来确定传输线的阻抗。本文目的是让读者区分电阻，阻抗和特性阻抗。后续传输线阻抗匹配内容，笔者有空再收集整理网路资料。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电阻，阻抗和阻抗匹配&quot;&gt;&lt;a href=&quot;#电阻，阻抗和阻抗匹配&quot; class=&quot;headerlink&quot; title=&quot;电阻，阻抗和阻抗匹配&quot;&gt;&lt;/a&gt;电阻，阻抗和阻抗匹配&lt;/h2&gt;&lt;p&gt;曾经一段时间，受到电阻，阻抗和阻抗匹配的困扰。刚接触射频的时候，经常会有人跟</summary>
      
    
    
    
    <category term="DSP" scheme="http://example.com/categories/DSP/"/>
    
    <category term="1.信号处理随笔" scheme="http://example.com/categories/DSP/1-%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>PCIE基础概念概述</title>
    <link href="http://example.com/interface/2023/02/23/1.PCIE/PCIE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/PCIE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/interface/2023/02/23/1.PCIE/PCIE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/PCIE%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%A6%82%E8%BF%B0/</id>
    <published>2023-02-22T16:47:37.000Z</published>
    <updated>2023-02-22T23:58:03.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本意是直接从PCIE的三层模型开始来讲PCIE的构成了。再次读了一段PCIE3.0规范后，感觉还是需要自顶而下的来介绍PCIE，本文首先介绍PCIE的基本结构传输方式等特性，然后阐述PCIE的简单网络拓扑和传输过程，给出一个传统的系统设计案例，最后对PCIE的3层模型（传输层，数据链路层和物理层）和传输协议做简要介绍。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h2&gt;&lt;p&gt;本意是直接从PCIE的三层模型开始来讲PCIE的构成了。再次读了一段PCIE3.0规范后，感觉还是需要自顶而下的来介绍PCIE，本文首先介绍</summary>
      
    
    
    
    <category term="interface" scheme="http://example.com/categories/interface/"/>
    
    <category term="1.PCIE" scheme="http://example.com/categories/interface/1-PCIE/"/>
    
    
  </entry>
  
  <entry>
    <title>PCIE概述</title>
    <link href="http://example.com/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/</id>
    <published>2023-02-16T23:32:19.000Z</published>
    <updated>2023-02-26T04:51:21.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>​PCIE对于硬件来说可能就是几根有特殊要求的差分线，但是一旦涉及到多个EP，增加了switch的时候，其电路也是蛮复杂的，不懂PCIE规范和一些基本的PCIE知识，可能都没办法把数据手册里面提到的参数，有效的整合联系起来，影响硬件设计的可靠性，轻者给软件和逻辑带来一些不必要的麻烦，重则硬件设计需要飞线改版,因此笔者主要目的是想结合网络上的一些文章、PCIE spec 和《PCIE系统结构体系标准教材》对PCIE总线做一个总体的概述，以便刚接触PCIE设计的提供PCIE设计基础和概念。<!--（其实，最最最开始我写这些的主要初衷是，一旦调试出了问题，可以有理有据的说明是不是硬件问题，有理有据的怼逻辑和软件。--></p><h1 id="PCIE总体概述"><a href="#PCIE总体概述" class="headerlink" title="PCIE总体概述"></a>PCIE总体概述</h1><p>​在调试PCIE的设计电路中的时候，硬件工程师最想的是一上电，软件一测试，链路初始化成功了，皆大欢喜，这个时候软件能排除故障的手段就多多了，硬件基本万事大吉。但是事与愿违，一旦产品上电后PCIE链路初始化不成功，就很尴尬了，排查手段相对来说较少不说，还不知道哪里会有问题。以下是笔者从网上众多资料和PCIE规范以及自己硬件工程师的视角下一些技术总结分享。特别是涉及到复杂switch的时候使用。</p><p>[^注1]: 本文主要参考网络文章PCIE扫盲、PCIE SPEC 3.0和《PCIE 系统体系结构标准教材》（PCIE1.0）。</p><h2 id="PCIE-简介"><a href="#PCIE-简介" class="headerlink" title="PCIE 简介"></a>PCIE 简介</h2><p>PCI-Express是用来互联诸如计算机和通信平台应用中外围设备的第三代I&#x2F;O总线。 由Intel在2001年的IDF上提出，由PCI-SIG（PCI特殊兴趣组织）认证发布后才改名为“PCI-Express”。它的主要优势就是数据传输速率高，另外还有抗干扰能力强，传输距离远，功耗低等优点。通常应用于移动设备，台式电脑、工作站、服务器、嵌入式计算等所有周边I&#x2F;O互联总线。</p><p>[^注2]: 第一代总线包括ISA,EISA,VESA和Micro Channel，第二代总线包括PCI,AGP和PCI-X.</p><h2 id="PCIE-发展历史"><a href="#PCIE-发展历史" class="headerlink" title="PCIE 发展历史"></a>PCIE 发展历史</h2><p>PCIE的建立这事儿，得从大约八十多年前讲起，计算机祖师爷冯诺依曼先生，创建了电子计算结构模型五大件（运算器、控制器、存储器（<a href="https://eastit.cn/tags-48.html">内存</a>）、输入设备、输出设备）。从那开始，大到全球各个地方的计算机节点互联（英特网等），小到单个计算机产品上不同设备（芯片之间）的互联，成为了工业界所有人绞尽脑汁想的问题。</p><p><img src="/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9E%8B.jpeg"></p><p>对于单个设备而言，大致可以分为数据处理部分（CPU+内存）和数据输入输出部分。如何去连接这两个部分呢？各大厂商经历过百家争鸣，各种各样的不同标准后，终于在上个世纪七八十年代ISA（Industry Standard Architecture）问世，但是由于CPU对于速率的要求不断提高，90年代便出现了第二代主流总线PCI（Peripheral Component Interconnect ），还是速率和硬件设计的复杂度等因素的影响，2000年以后计算机硬件设计的主流逐渐由PCIe（Peripheral Component Interconnect Express）开始承担。直至目前PCIE还是计算机设计中大部分人的首选互联总线。</p><h2 id="PCI时代"><a href="#PCI时代" class="headerlink" title="PCI时代"></a>PCI时代</h2><p> 话说上世纪80年代处理器的速度是越来越快，早期的ISA并行总线有8位和16位两种模式，时钟频率为8MHz，总线带宽可以达到8MB&#x2F;s和16MB&#x2F;s；到88年推出了EISA在兼容ISA的基础上将位宽增加到32位，带宽因此也能达到32MB&#x2F;s，当时这速率连接80386&#x2F;80486之类的处理器已足够；但随着处理器速度越来越快，EISA总线的带宽已经满足不了CPU的需求，CPU外网总线带宽已经成为制约计算机处理能力继续提高的瓶颈。于是在1991年，Intel、IBM、HP、Compaq、DEC等100多家计算机公司成立了PCISIG，联合推出PCI（Peripheral Component Interconnect），92年PCI1.0便发布了。</p><p>从速度上看：一开始PCI总线支持32位和64位两种位宽，时钟频率为33MHz，因此，32bit总线带宽32bit x 33MHz &#x3D;1056Mbps &#x3D; 132MB&#x2F;s；64bit总线带宽64bit x 33MHz&#x3D;2112Mbps&#x3D;264MB&#x2F;s。后来PCI总线时钟频率升级到66MHz，因此PCI总线最大带宽可以达到532MB&#x2F;s。</p><p>从结构上看：PCI使用了树形拓扑，树根和处理器桥接，各种IO外设成为叶子节点挂在树上，中间节点为PCI-PCI桥。PCI开始支持即插即用（当板卡插入系统时，系统会自动对板卡所需资源进行分配，如基地址、中断号等，并自动寻找驱动程序；而不像旧的ISA总线需要进行复杂的手动配置。再也不用担心跳线设错中断冲突了。</p><p><img src="/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/PCI%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><p>为了兼容当时大量ISA外设，PCI使用PCI-ISA桥连接ISA这些低速设备，然后第一代计算机主流总线ISA就消失在历史长河中。</p><p><img src="/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/PCI%E6%80%BB%E7%BA%BF%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"></p><p> 随着电子计算机的发展，CPU的速率快速的提高，PCI的速率也不得提高，但是由于Reflected-Wave Signaling技术的限制，PCI总线的时钟频率也从33M变更到66M已经达到上限。此外，总线频率的提高必然带来负载能力下降，不可避免的当需要使用多个PCI设备的时候，需要使用到桥片，整个计算机的成本和功耗增加。因此总线又发展到了PCI-X（Peripheral Component Interconnect eXtended）。与PCI总线相比，PCI-X总线的位宽未改变，而是将时钟频率进行了提高。PCI-X 1.0的时钟频率有66MHz&#x2F;100MHz&#x2F;133MHz，总线带宽分别为：264MB&#x2F;s,400MB&#x2F;s和532MB&#x2F;s(32位)，528MB&#x2F;s,800MB&#x2F;s和1064MB&#x2F;s；PCI-X2.0的时钟频率有266MHZ&#x2F;533MHz&#x2F;1066MHz,总线带宽分别为1064MB&#x2F;s、2132MB&#x2F;s和4264MB&#x2F;s(32位)，3128MB&#x2F;s,4264MB&#x2F;s和8512MB&#x2F;s(64位)。PCI-X与PCI在结构上完全兼容。不得不说PCI-C解决了PCI速率上限问题且有着优越的性能，但也是因为其本身是对PCI的改进，且由于平行总线带来的复杂PCB设计、同样的高功耗，高成本等，再加上生不逢时，问世不久后就出现了PCIE高速串行总线，因此应用的广泛程度远没有PCI和PCIE。</p><p>[^注3]: 并行总线三大缺陷：1.信号线从发送器到接收器发送1bit的数据时间（flight time）需要小于一个时钟周期，要加快并行总线的速率，就需要加快时钟频率，不可避免带来负载减少，走线更加简短难度更大；2.接收端和发送端的时钟会有时钟偏移（coclk shew），无法消除只能尽量减小，时钟的速率越高，越难把控；3.信号偏差（signal skew）并行总线的数据需要所有bit到达才能锁定，因此需要等待最慢的那根信号线达到。</p><h2 id="PCIE时代"><a href="#PCIE时代" class="headerlink" title="PCIE时代"></a>PCIE时代</h2><p>还有由于CPU按照摩尔定律的发展，PCI&#x2F;PCI-X的速率最终还是远远无法满足要求，要提高速率要么提高时钟频率，要么提高位宽。无疑并行总线无论是提高速率，信号线之间的串扰导致时序难以控制，再加上PCB设计的复杂度，以及Reflected-Wave Signaling技术的限制等使得PCI&#x2F;PCI-X逐渐退出历史长河，新一代的高速串行总线PCIE总线逐渐成为主流。PCIE采用的串行通信的技术发送信号的时钟已经嵌入到数据里面，不需要额外的同步时钟，因此串行总线不会存在fight time缺陷，同样的因为内嵌时钟所以colck shew也不存在了，signal shew在PCIE x1 lane的应用也是不存在，只有多条lane时会出现，但是接收器的自动校准会将signal shew大大的缩减。这造成了PCIE可以客观的速率运行。然而,串行总线也会有其一套复杂的结构体系和问题，下节将开始介绍整个PCIE的内容。</p><p><img src="/interface/2023/02/17/1.PCIE/PCIE%E6%A6%82%E8%BF%B0/PCIE%E9%80%9F%E7%8E%87%E5%9B%BE.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href>PCIE扫盲 系列网文</a></li><li><a href>PCIE3.0规范</a></li><li><a href>PCIE结构体系教材</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;​	PCIE对于硬件来说可能就是几根有特殊要求的差分线，但是一旦涉及到多个EP，增加了switch的时候，其电路也是蛮复杂的，不懂PCIE规</summary>
      
    
    
    
    <category term="interface" scheme="http://example.com/categories/interface/"/>
    
    <category term="1.PCIE" scheme="http://example.com/categories/interface/1-PCIE/"/>
    
    
  </entry>
  
  <entry>
    <title>EMC基础</title>
    <link href="http://example.com/EMC/2023/02/15/EMC%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/EMC/2023/02/15/EMC%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-14T23:28:39.000Z</published>
    <updated>2023-02-26T00:25:27.143Z</updated>
    
    <content type="html"><![CDATA[<p>EMC（ElectroMagnetic Compatibility）是笔者最近两年在项目中，时常需要面对的一个头疼问题。比硬件调试更加玄学，无论是模块级或者系统级的产品都需要考虑这方面。笔者认为EMC也是信号处理领域不可避免需要面对的问题，但苦于还没有形成系统或者有底气的理论知识，这边仅以收集学习和平常遇到的问题做记录以累计经验，主要会以EMC的基础知识，GJB151B和DO160G的解读为主要内容。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;EMC（ElectroMagnetic Compatibility）是笔者最近两年在项目中，时常需要面对的一个头疼问题。比硬件调试更加玄学，无论是模块级或者系统级的产品都需要考虑这方面。笔者认为EMC也是信号处理领域不可避免需要面对的问题，但苦于还没有形成系统或者有底气的理</summary>
      
    
    
    
    <category term="EMC" scheme="http://example.com/categories/EMC/"/>
    
    
  </entry>
  
  <entry>
    <title>信号处理基础</title>
    <link href="http://example.com/DSP/2023/02/15/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/DSP/2023/02/15/%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-14T23:25:56.000Z</published>
    <updated>2023-02-26T00:35:30.720Z</updated>
    
    <content type="html"><![CDATA[<p>DSP类（data signal process）的主要内容是对中频的信号处理硬件设计，理论，测试方面进行从最基础的概念到实际的设计测试过程的介绍。笔者主要介绍的是高速的ADC,DAC，运放以及信号处理的基础概念和理论，由于信号处理这一块注意的细节，单个设计所带来的理论知识非常的多，笔者至今未形成大的系统理论架构，只能是需要某个小点就开一个post来作为分享，再根据不同的应用场景选择性的会使用Matlab进行信号处理仿真 便于理解。等到笔者觉得可以写整个架构的时候再做所有内容的整理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href></a></li><li><a href></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DSP类（data signal process）的主要内容是对中频的信号处理硬件设计，理论，测试方面进行从最基础的概念到实际的设计测试过程的介绍。笔者主要介绍的是高速的ADC,DAC，运放以及信号处理的基础概念和理论，由于信号处理这一块注意的细节，单个设计所带来的理论知识</summary>
      
    
    
    
    <category term="DSP" scheme="http://example.com/categories/DSP/"/>
    
    
  </entry>
  
  <entry>
    <title>interface 概述</title>
    <link href="http://example.com/interface/2023/02/14/%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0/"/>
    <id>http://example.com/interface/2023/02/14/%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0/</id>
    <published>2023-02-13T16:43:38.000Z</published>
    <updated>2023-02-15T15:33:55.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口概述"><a href="#接口概述" class="headerlink" title="接口概述"></a>接口概述</h2><p>在嵌入式开发中，不可避免的需要用到各式各样的总线接口，<br>接口类post中间主要介绍常见的低速接口的规范标准，<br>如RS232,RS422,RS485等，以及常用的高速接口的规范标准  如网口，PCIE,SRIO以及用于高速ADC的JESD204接口等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口概述&quot;&gt;&lt;a href=&quot;#接口概述&quot; class=&quot;headerlink&quot; title=&quot;接口概述&quot;&gt;&lt;/a&gt;接口概述&lt;/h2&gt;&lt;p&gt;在嵌入式开发中，不可避免的需要用到各式各样的总线接口，&lt;br&gt;接口类post中间主要介绍常见的低速接口的规范标准，&lt;br&gt;如</summary>
      
    
    
    
    <category term="interface" scheme="http://example.com/categories/interface/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/undefined/2023/02/10/hello-world/"/>
    <id>http://example.com/undefined/2023/02/10/hello-world/</id>
    <published>2023-02-10T11:19:36.708Z</published>
    <updated>2023-02-10T11:19:36.708Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
